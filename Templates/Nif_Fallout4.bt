//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:     NIF_fallout4.bt
// Author:   figment
// Revision:
// Purpose:  Base Fallout 4 objects.  
//           Will be moved to nif folder later but convenient here for now
//--------------------------------------

RequiresVersion( 6.0 );

#include "NifTemplate.bt"

if( !exists( header ) ) {
    Printf("Invalid Nif File");
    Exit(-1);
}

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;
typedef unsigned char	bool;

typedef struct {
    NiAVObject base;
    int unknown[4];
    Ref Skin;
    Ref unk;
    Ref unk;
    int unknown <format=hex>;
    int numVertices10 <format=hex,comment="0x10 larger than vert size">;
    int numTris;
    ushort numVerts;
    byte flags01;
    byte flags02;           // 9C
    byte flags03;
    byte flags04;
    typedef struct  {
        hfloat x;
        hfloat y;
        hfloat z;
        hfloat unk ;
        hfloat ux;
        hfloat uy;
        hfloat unk;
        ushort unk <format=hex>;
        hfloat point;
        hfloat point;
        hfloat notable;
        hfloat point;
        hfloat point;
        hfloat point;
        byte unknown <format=hex>;
        byte unknown <format=hex>;
        byte unknown <format=hex>;
        byte unknown <format=hex>;
        // ushort unknown;
    } VERTDATA <name="Vertices">;
    struct VERTDATA verts[numVerts];
    Triangle tris[numTris];
    int numTris;
    int numUnk;
    int numUnk;
    struct UnknownStruct {
        int unknown;
        int unknown;
        int unknown;
        int unknown;
    };
    if (numUnk > 0)
        UnknownStruct unknowns[numUnk] <optimize=false>;
} BSSubIndexTriShape <name="BSSubIndexTriShape">;

typedef struct  {
} BSSkin_Instance <name="BSSkin::Instance">;

typedef struct  {
} BSSkin_BoneData <name="BSSkin::BoneData">;

//info_version = 0x14020007;
//info_userVersion = 12;
//info_userVersion2 = 130;

void LoadBlocks(int64 blockStart, Header& header) {
    local int block_idx, typeIdx;
    local int64 blockPos, blockSize, blockEnd;
    local string blockType;
    local int skip_check, wrote_header;
    local int diff, curPos;

    wrote_header = 0;
    blockPos = blockStart;
    for (block_idx=0; block_idx<header.numBlocks; ++block_idx) {
        FSeek(blockPos);
        typeIdx = header.blockTypeIndex[block_idx];
        blockSize = header.blockSize[block_idx];
        blockType = ReadNifString(header.blockTypes[typeIdx]);
        blockEnd = blockPos + blockSize;

//        if (Strcmp(blockType, "NiNode") == 0)
//            NiNode node;
        skip_check = 0;
        if (Strcmp(blockType, "BSSubIndexTriShape") == 0)
            BSSubIndexTriShape shape;
        else if (Strcmp(blockType, "BSSkin::Instance") == 0)
            BSSkin_Instance skin;
        else if (Strcmp(blockType, "BSSkin::BoneData") == 0)
            BSSkin_BoneData data;
        else if (Strcmp(blockType, "BSLightingShaderProperty") == 0)
            BSLightingShaderProperty property;
        else
            skip_check = 1;


        if (!skip_check) {
            curPos = FTell();
            diff = blockEnd - curPos;
            if ( diff != 0 ) {
                if (wrote_header == 0) {
                    Printf("\nErrors:\n");
                    wrote_header = 1;
                }
                Printf("%4d | %-50s | %5d | %5d != %5d | %5d\n",
                 block_idx, blockType, blockPos, blockEnd, curPos, diff);
            }
        }

        blockPos = blockEnd;
    }
}

LoadBlocks(FTell(), header);
