//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:     NIF_fallout4.bt
// Author:   figment
// Revision:
// Purpose:  Base Fallout 4 objects.  
//           Will be moved to nif folder later but convenient here for now
//--------------------------------------

RequiresVersion( 6.0 );

#include "NifTemplate.bt"

if( !exists( header ) ) {
    Printf("Invalid Nif File");
    Exit(-1);
}

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;


if (!exists(error_count))
    local int error_count;


local bool isFallout4 = false;
if (exists(info_userVersion) && info_userVersion == 12 && info_userVersion2 == 130)
    isFallout4 = true;

local int block_idx;
void LoadBlocks(int64 blockStart, Header& header) {
    local int typeIdx;
    local int64 blockPos, blockSize, blockEnd;
    local string blockType;
    local int skip_check, wrote_header, missing_check, error_count;
    local int diff, curPos;

#define WRITE_HEADER if (wrote_header == 0) { \
                Warning("Errors"); \
                Printf("\n%s\nErrors:\n", GetFileName()); \
                wrote_header = 1; }

// ------- Begin Type Check  -------
    diff = 0;
    for (typeIdx=0; typeIdx<header.numBlockTypes; ++typeIdx) {
        blockType =  ReadNiString(header.blockTypes[typeIdx]);
        if (blockType == "BSTriShape") {
            diff = 1;
            break;
        }
    }
//    if (diff == 0) return;
    diff = 0;
// ------- End Type Check  -------

    wrote_header = 0;
    blockPos = blockStart;
    for (block_idx=0; block_idx<header.numBlocks; ++block_idx) {
        FSeek(blockPos);
        typeIdx = header.blockTypeIndex[block_idx];
        blockSize = header.blockSize[block_idx];
        blockType = ReadNiString(header.blockTypes[typeIdx]);
        blockEnd = blockPos + blockSize;

         // temporary hack
        //if (blockType != "BSTriShape" && blockType != "BSSubIndexTriShape" &&  blockType != "BSMeshLODTriShape") {
//        if (blockType != "BSTriShape") {
//            blockPos = blockEnd;
//            continue;
//        }


             if (blockType == "NiNode")                                  NiNode                           block<hidden=true>;
        else if (blockType == "NiAlphaController")                       NiAlphaController                block; 
        else if (blockType == "NiAlphaProperty")                         NiAlphaProperty                  block;        
        else if (blockType == "NiBillboardNode")                         NiBillboardNode                  block;
        else if (blockType == "NiBinaryExtraData")                       NiBinaryExtraData                block; 
        else if (blockType == "NiBlendBoolInterpolator")                 NiBlendBoolInterpolator          block;
        else if (blockType == "NiBlendFloatInterpolator")                NiBlendFloatInterpolator         block;
        else if (blockType == "NiBlendPoint3Interpolator")               NiBlendPoint3Interpolator        block;
        else if (blockType == "NiBoolData")                              NiBoolData                       block;
        else if (blockType == "NiBoolInterpController")                  NiBoolInterpController           block;
        else if (blockType == "NiBoolInterpolator")                      NiBoolInterpolator               block;
        else if (blockType == "NiBoolTimelineInterpolator")              NiBoolTimelineInterpolator       block;
        else if (blockType == "NiCamera")                                NiCamera                         block;
        else if (blockType == "NiControllerManager")                     NiControllerManager              block;
        else if (blockType == "NiControllerSequence")                    NiControllerSequence             block;
        else if (blockType == "NiDefaultAVObjectPalette")                NiDefaultAVObjectPalette         block; 
        else if (blockType == "NiExtraData")                             NiExtraData                      block; 
        else if (blockType == "NiFloatData")                             NiFloatData                      block;
        else if (blockType == "NiFloatInterpolator")                     NiFloatInterpolator              block;
        else if (blockType == "NiIntegerExtraData")                      NiIntegerExtraData               block;
        else if (blockType == "NiLightColorController")                  NiLightColorController           block; 
        else if (blockType == "NiLightDimmerController")                 NiLightDimmerController          block; 
        else if (blockType == "NiLightRadiusController")                 NiLightRadiusController          block; 
        else if (blockType == "NiMultiTargetTransformController")        NiMultiTargetTransformController block;
        else if (blockType == "NiPSysAgeDeathModifier")                  NiPSysAgeDeathModifier           block;
        else if (blockType == "NiPSysBombModifier")                      NiPSysBombModifier               block;
        else if (blockType == "NiPSysBoundUpdateModifier")               NiPSysBoundUpdateModifier        block;
        else if (blockType == "NiPSysBoxEmitter")                        NiPSysBoxEmitter                 block;
        else if (blockType == "NiPSysColliderManager")                   NiPSysColliderManager            block;
        else if (blockType == "NiPSysCylinderEmitter")                   NiPSysCylinderEmitter            block;
        else if (blockType == "NiPSysData")                              NiPSysData                       block;
        else if (blockType == "NiPSysDragModifier")                      NiPSysDragModifier               block;
        else if (blockType == "NiPSysEmitterCtlr")                       NiPSysEmitterCtlr                block;
        else if (blockType == "NiPSysEmitterDeclinationCtlr")            NiPSysEmitterDeclinationCtlr     block;
        else if (blockType == "NiPSysEmitterDeclinationVarCtlr")         NiPSysEmitterDeclinationVarCtlr  block;
        else if (blockType == "NiPSysEmitterInitialRadiusCtlr")          NiPSysEmitterInitialRadiusCtlr   block;
        else if (blockType == "NiPSysEmitterLifeSpanCtlr")               NiPSysEmitterLifeSpanCtlr        block;
        else if (blockType == "NiPSysEmitterPlanarAngleCtlr")            NiPSysEmitterPlanarAngleCtlr     block;
        else if (blockType == "NiPSysEmitterSpeedCtlr")                  NiPSysEmitterSpeedCtlr           block;
        else if (blockType == "NiPSysGravityModifier")                   NiPSysGravityModifier            block;
        else if (blockType == "NiPSysGravityStrengthCtlr")               NiPSysGravityStrengthCtlr        block;
        else if (blockType == "NiPSysInitialRotSpeedCtlr")               NiPSysInitialRotSpeedCtlr        block;
        else if (blockType == "NiPSysInitialRotSpeedVarCtlr")            NiPSysInitialRotSpeedVarCtlr     block;
        else if (blockType == "NiPSysMeshEmitter")                       NiPSysMeshEmitter                block;
        else if (blockType == "NiPSysModifierActiveCtlr")                NiPSysModifierActiveCtlr         block;
        else if (blockType == "NiPSysPlanarCollider")                    NiPSysPlanarCollider             block;
        else if (blockType == "NiPSysPositionModifier")                  NiPSysPositionModifier           block;
        else if (blockType == "NiPSysRotationModifier")                  NiPSysRotationModifier           block;
        else if (blockType == "NiPSysSpawnModifier")                     NiPSysSpawnModifier              block;
        else if (blockType == "NiPSysSphereEmitter")                     NiPSysSphereEmitter              block;
        else if (blockType == "NiPSysSphericalCollider")                 NiPSysSphericalCollider          block;
        else if (blockType == "NiPSysUpdateCtlr")                        NiPSysUpdateCtlr                 block;
        else if (blockType == "NiParticleSystem")                        NiParticleSystem                 block;
        else if (blockType == "NiPathInterpolator")                      NiPathInterpolator               block;
        else if (blockType == "NiPoint3Interpolator")                    NiPoint3Interpolator             block; 
        else if (blockType == "NiPointLight")                            NiPointLight                     block; 
        else if (blockType == "NiPosData")                               NiPosData                        block; 
        else if (blockType == "NiStringExtraData")                       NiStringExtraData                block;
        else if (blockType == "NiStringsExtraData")                      NiStringsExtraData               block; 
        else if (blockType == "NiSwitchNode")                            NiSwitchNode                     block;
        else if (blockType == "NiTextKeyExtraData")                      NiTextKeyExtraData               block;
        else if (blockType == "NiTransformController")                   NiTransformController            block;        
        else if (blockType == "NiTransformData")                         NiTransformData                  block;
        else if (blockType == "NiTransformInterpolator")                 NiTransformInterpolator          block;
        else if (blockType == "NiVisController")                         NiVisController                  block;
        else if (blockType == "bhkNPCollisionObject")                    bhkNPCollisionObject             block;
        else if (blockType == "bhkPhysicsSystem")                        bhkPhysicsSystem                 block;
        else if (blockType == "bhkRagdollSystem")                        bhkRagdollSystem                 block;
        else if (blockType == "BSBehaviorGraphExtraData")                BSBehaviorGraphExtraData         block; 
        else if (blockType == "BSBlastNode")                             BSBlastNode                      block;
        else if (blockType == "BSBoneLODExtraData")                      BSBoneLODExtraData               block; 
        else if (blockType == "BSBound")                                 BSBound                          block; 
        else if (blockType == "BSClothExtraData")                        BSClothExtraData                 block; 
        else if (blockType == "BSConnectPoint::Children")                BSConnectPoint_Children          block;
        else if (blockType == "BSConnectPoint::Parents")                 BSConnectPoint_Parents           block;
        else if (blockType == "BSDamageStage")                           BSDamageStage                    block;
        else if (blockType == "BSEffectShaderProperty")                  BSEffectShaderProperty           block; 
        else if (blockType == "BSEffectShaderPropertyColorController")   BSEffectShaderPropertyColorController block;
        else if (blockType == "BSEffectShaderPropertyFloatController")   BSEffectShaderPropertyFloatController block; 
        else if (blockType == "BSEyeCenterExtraData")                    BSEyeCenterExtraData             block; 
        else if (blockType == "BSFrustumFOVController")                  BSFrustumFOVController           block;
        else if (blockType == "BSFurnitureMarkerNode")                   BSFurnitureMarkerNode            block;
        else if (blockType == "BSLagBoneController")                     BSLagBoneController              block; 
        else if (blockType == "BSLeafAnimNode")                          BSLeafAnimNode                   block;
        else if (blockType == "BSLightingShaderProperty")                BSLightingShaderProperty         block;
        else if (blockType == "BSLightingShaderPropertyColorController") BSLightingShaderPropertyColorController block; 
        else if (blockType == "BSLightingShaderPropertyFloatController") BSLightingShaderPropertyFloatController block; 
        else if (blockType == "BSMasterParticleSystem")                  BSMasterParticleSystem           block;
        else if (blockType == "BSMeshLODTriShape")                       BSMeshLODTriShape                block;
        else if (blockType == "BSMultiBound")                            BSMultiBound                     block;
        else if (blockType == "BSMultiBoundAABB")                        BSMultiBoundAABB                 block;
        else if (blockType == "BSMultiBoundNode")                        BSMultiBoundNode                 block;
        else if (blockType == "BSMultiBoundOBB")                         BSMultiBoundOBB                  block;
        else if (blockType == "BSNiAlphaPropertyTestRefController")      BSNiAlphaPropertyTestRefController block; 
        else if (blockType == "BSOrderedNode")                           BSOrderedNode                    block;
        else if (blockType == "BSPSysInheritVelocityModifier")           BSPSysInheritVelocityModifier    block;
        else if (blockType == "BSPSysLODModifier")                       BSPSysLODModifier                block;
        else if (blockType == "BSPSysMultiTargetEmitterCtlr")            BSPSysMultiTargetEmitterCtlr     block;
        else if (blockType == "BSPSysRecycleBoundModifier")              BSPSysRecycleBoundModifier       block;
        else if (blockType == "BSPSysScaleModifier")                     BSPSysScaleModifier              block;
        else if (blockType == "BSPSysSimpleColorModifier")               BSPSysSimpleColorModifier        block;
        else if (blockType == "BSPSysSubTexModifier")                    BSPSysSubTexModifier             block;
        else if (blockType == "BSPackedCombinedSharedGeomDataExtra")     BSPackedCombinedSharedGeomDataExtra block;
        else if (blockType == "BSParentVelocityModifier")                BSParentVelocityModifier         block;
        else if (blockType == "BSPositionData")                          BSPositionData                   block;
        else if (blockType == "BSProceduralLightningController")         BSProceduralLightningController  block;
        else if (blockType == "BSShaderTextureSet")                      BSShaderTextureSet               block;
        else if (blockType == "BSSkin::BoneData")                        BSSkin_BoneData                  block;
        else if (blockType == "BSSkin::Instance")                        BSSkin_Instance                  block;
        else if (blockType == "BSSkyShaderProperty")                     BSSkyShaderProperty              block;
        else if (blockType == "BSSubIndexTriShape")                      BSSubIndexTriShape               block;
        else if (blockType == "BSTreeNode")                              BSTreeNode                       block;
        else if (blockType == "BSTriShape")                              BSTriShape                       block;
        else if (blockType == "BSValueNode")                             BSValueNode                      block; 
        else if (blockType == "BSWaterShaderProperty")                   BSWaterShaderProperty            block;
        else if (blockType == "BSWindModifier")                          BSWindModifier                   block;
        else if (blockType == "BSXFlags")                                BSXFlags                         block;

        else {
            WRITE_HEADER;
            Printf("%4d | %-50s | Missing\n", block_idx, blockType);
            skip_check = 1;
            error_count = error_count + 1;
        }

        SetForeColor (cNone);

        // print out mismatch errors
        if (!skip_check) {
            curPos = FTell();
            diff = blockEnd - curPos;
            if ( diff != 0 ) {
                WRITE_HEADER;
                Printf("%4d | %-50s | %5d | %5d != %5d | %5d\n",
                 block_idx, blockType, blockPos, blockEnd, curPos, diff);
                SetForeColor(cRed);
                error_count = error_count + 1;

            }
        }

        blockPos = blockEnd;
    }
}

if (Stricmp(ext,".NIF") == 0 || Stricmp(ext,".BTR") == 0 || Stricmp(ext,".BTO") == 0) {
    //DumpBlocks(FTell(), header);    
    LoadBlocks(FTell(), header);
}
else if (Stricmp(ext,".BGSM") == 0 ) {
    if (FEof() == 0) {
        Warning("Errors");
        Printf("\n%s not fully parsed\n", GetFileName());
    }
}

