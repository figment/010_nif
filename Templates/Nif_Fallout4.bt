//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:     NIF_fallout4.bt
// Author:   figment
// Revision:
// Purpose:  Base Fallout 4 objects.  
//           Will be moved to nif folder later but convenient here for now
//--------------------------------------

RequiresVersion( 6.0 );

#include "NifTemplate.bt"

if( !exists( header ) ) {
    Printf("Invalid Nif File");
    Exit(-1);
}

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;

typedef struct {
    hfloat x;
    hfloat y;
    hfloat z;
    hfloat unk1 <comment="Possible Face Weight (or vert/uv dot product)">;
    hfloat ux;
    hfloat uy;
    char unk[8];
    if (flag1 == 6) // from parent
        int vertColors <comment="Vertex Colors?">; 

    // in uniformF_Nopack these are all same for first 57 verts
    if (flag1 >= 8) {
        hfloat notable;
        hfloat point;
        hfloat point;
        hfloat point;
        byte unknown <format=hex>;
        byte unknown <format=hex>;
        byte unknown <format=hex>;
        byte unknown <format=hex>;
    }
    if (flag1 == 9) { // FemaleEyesAO.nif
        int unk; 
    }
} VERTDATA <name="Vertices">;


typedef struct {
    NiAVObject base;
    float unknown[4];
    Ref Skin;
    Ref bsProperties[2]<comment="<NiProperty>">;
    byte flag1 <comment="Vertex Data Type">;
    byte flag2 <format=hex,comment="2">;
    byte flag3 <format=hex,comment="43h">;
    byte flag4 <format=hex, comment="0 or 50h">;
    byte flag5 <format=hex>;
    byte flag6 <format=hex,comment="B0h">;
    byte flag7 <format=hex,comment="05h">;
    byte flag8 <format=hex>;
    int numTris;
    ushort numVerts;
    int triVertBlockSize;
    VERTDATA verts[numVerts];
    Triangle tris[numTris];
} BSTriShape <name="BSTriShape">;

typedef struct {
    BSTriShape base <open=true>;
    int numTris;
    int numUnk;
    int numUnk;
    struct UnknownStruct {
        int unknown;
        int unknown;
        int unknown;
        int numStuff;
        typedef struct {
            int unknown;
            int unknown;
            int unknown;
            int unknown;
        } UnknownStuff; 
        if (numStuff > 0)
            UnknownStuff stuff[numStuff];
    };
    if (numUnk > 0)
        UnknownStruct unknowns[numUnk] <optimize=false>;
} BSSubIndexTriShape <name="BSSubIndexTriShape">;

typedef struct {
    int unk;
    short unk;
    short unk;
    short unk;
    int unk;
} bhkNPCollisionObject <name="bhkNPCollisionObject">;






local bool isFallout4 = false;
if (info_userVersion == 12 && info_userVersion2 == 130)
    isFallout4 = true;

void LoadBlocks(int64 blockStart, Header& header) {
    local int block_idx, typeIdx;
    local int64 blockPos, blockSize, blockEnd;
    local string blockType;
    local int skip_check, wrote_header, missing_check;
    local int diff, curPos;

#define WRITE_HEADER if (wrote_header == 0) { \
                Warning("Errors"); \
                Printf("\nErrors:\n"); \
                wrote_header = 1; }

    wrote_header = 0;
    blockPos = blockStart;
    for (block_idx=0; block_idx<header.numBlocks; ++block_idx) {
        FSeek(blockPos);
        typeIdx = header.blockTypeIndex[block_idx];
        blockSize = header.blockSize[block_idx];
        blockType = ReadNiString(header.blockTypes[typeIdx]);
        blockEnd = blockPos + blockSize;

        if      (blockType == "NiNode")                            NiNode                           block<hidden=true>;
        else if (blockType == "BSSubIndexTriShape")                BSSubIndexTriShape               block;
        else if (blockType == "BSSkin::Instance")                  BSSkin_Instance                  block;
        else if (blockType == "BSSkin::BoneData")                  BSSkin_BoneData                  block;
        else if (blockType == "BSLightingShaderProperty")          BSLightingShaderProperty         block;
        else if (blockType == "BSShaderTextureSet")                BSShaderTextureSet               block;
        else if (blockType == "BSXFlags")                          BSXFlags                         block;
        else if (blockType == "bhkNPCollisionObject")              bhkNPCollisionObject             block;
        else if (blockType == "bhkPhysicsSystem")                  bhkPhysicsSystem                 block;
        else if (blockType == "bhkRagdollSystem")                  bhkRagdollSystem                 block;
        else if (blockType == "BSTriShape")                        BSTriShape                       block;
        else if (blockType == "NiAlphaProperty")                   NiAlphaProperty                  block;        
        else if (blockType == "NiTransformController")             NiTransformController            block;        
        else if (blockType == "BSConnectPoint::Parents")           BSConnectPoint_Parents           block;
        else if (blockType == "BSConnectPoint::Children")          BSConnectPoint_Children          block;
        else if (blockType == "NiTransformInterpolator")           NiTransformInterpolator          block;
        else if (blockType == "NiTransformData")                   NiTransformData                  block;
        else if (blockType == "NiControllerManager")               NiControllerManager              block;
        else if (blockType == "NiIntegerExtraData")                NiIntegerExtraData               block;
        else if (blockType == "NiStringExtraData")                 NiStringExtraData                block;
        else if (blockType == "NiMultiTargetTransformController")  NiMultiTargetTransformController block;
        else if (blockType == "NiControllerSequence")              NiControllerSequence             block;
        else if (blockType == "NiBoolInterpolator")                NiBoolInterpolator               block;
        else if (blockType == "NiVisController")                   NiVisController                  block;
        else if (blockType == "NiBoolInterpController")            NiBoolInterpController           block;
        else if (blockType == "NiFloatInterpolator")               NiFloatInterpolator              block;
        else if (blockType == "NiFloatData")                       NiFloatData                      block;
        else if (blockType == "NiBoolData")                        NiBoolData                       block;
        else if (blockType == "NiTextKeyExtraData")                NiTextKeyExtraData               block;
        else if (blockType == "NiBlendBoolInterpolator")           NiBlendBoolInterpolator          block;
        else if (blockType == "NiBlendFloatInterpolator")          NiBlendFloatInterpolator         block;
        else if (blockType == "NiDefaultAVObjectPalette")          NiDefaultAVObjectPalette         block; 
        else if (blockType == "BSBehaviorGraphExtraData")          BSBehaviorGraphExtraData         block; 
        else if (blockType == "BSEffectShaderPropertyFloatController") BSEffectShaderPropertyFloatController block; 
        else if (blockType == "BSLightingShaderPropertyFloatController") BSLightingShaderPropertyFloatController block; 
        else if (blockType == "BSEffectShaderProperty")            BSEffectShaderProperty           block; 
        else if (blockType == "BSNiAlphaPropertyTestRefController") BSNiAlphaPropertyTestRefController block; 
        else if (blockType == "NiAlphaController")                 NiAlphaController                block; 
        else if (blockType == "BSBoneLODExtraData")                BSBoneLODExtraData               block; 
        else if (blockType == "BSBound")                           BSBound                          block; 
 

        else {
            WRITE_HEADER;
            Printf("%4d | %-50s | Missing\n", block_idx, blockType);
            skip_check = 1;
        }

        SetForeColor (cNone);

        // print out mismatch errors
        if (!skip_check) {
            curPos = FTell();
            diff = blockEnd - curPos;
            if ( diff != 0 ) {
                WRITE_HEADER;
                Printf("%4d | %-50s | %5d | %5d != %5d | %5d\n",
                 block_idx, blockType, blockPos, blockEnd, curPos, diff);
                SetForeColor(cRed);

            }
        }

        blockPos = blockEnd;
    }
}

LoadBlocks(FTell(), header);
