//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:     NIF_fallout4.bt
// Author:   figment
// Revision:
// Purpose:  Base Fallout 4 objects.  
//           Will be moved to nif folder later but convenient here for now
//--------------------------------------

RequiresVersion( 6.0 );

#include "NifTemplate.bt"

if( !exists( header ) ) {
    Printf("Invalid Nif File");
    Exit(-1);
}

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;

typedef struct  {
    hfloat x;
    hfloat y;
    hfloat z;
    hfloat unk ;
    hfloat ux;
    hfloat uy;
    hfloat unk;
    ushort unk <format=hex>;
    hfloat point;
    hfloat point;
    int unk;
} VERTDATA <name="Vertices">;

typedef struct  {
    hfloat x;
    hfloat y;
    hfloat z;
    hfloat unk ;
    hfloat ux;
    hfloat uy;
    hfloat unk;
    ushort unk <format=hex>;
    hfloat point;
    hfloat point;
    hfloat notable;
    hfloat point;
    hfloat point;
    hfloat point;
    byte unknown <format=hex>;
    byte unknown <format=hex>;
    byte unknown <format=hex>;
    byte unknown <format=hex>;
    // ushort unknown;
} VERTDATA2 <name="Vertices">;

typedef struct {
    NiAVObject base;
    int unknown[4];
    Ref Skin;
    Ref unk;
    Ref unk;
    int unknown <format=hex>;
    int numVertices10 <format=hex,comment="0x10 larger than vert size">;
    int numTris;
    ushort numVerts;
    byte flags01;
    byte flags02;           // 9C
    byte flags03;
    byte flags04;
    VERTDATA verts[numVerts];
    Triangle tris[numTris];
} BSTriShape <name="BSTriShape">;

typedef struct {
    NiAVObject base;
    int unknown[4];
    Ref Skin;
    Ref unk;
    Ref unk;
    int unknown <format=hex>;
    int numVertices10 <format=hex,comment="0x10 larger than vert size">;
    int numTris;
    ushort numVerts;
    byte flags01;
    byte flags02;           // 9C
    byte flags03;
    byte flags04;
    VERTDATA2 verts[numVerts];
    Triangle tris[numTris];
    int numTris;
    int numUnk;
    int numUnk;
    struct UnknownStruct {
        int unknown;
        int unknown;
        int unknown;
        int numStuff;
        typedef struct {
            int unknown;
            int unknown;
            int unknown;
            int unknown;
        } UnknownStuff; 
        if (numStuff > 0)
            UnknownStuff stuff[numStuff];
    };
    if (numUnk > 0)
        UnknownStruct unknowns[numUnk] <optimize=false>;
} BSSubIndexTriShape <name="BSSubIndexTriShape">;

typedef struct {
    int unk;
    short unk;
    short unk;
    short unk;
    int unk;
} bhkNPCollisionObject <name="bhkNPCollisionObject">;

typedef struct {
    int blobSize;
    char blob[blobSize] <format=hex>;
} bhkPhysicsSystem <name="bhkPhysicsSystem">;



local bool isFallout4 = false;
if (info_userVersion == 12 && info_userVersion2 == 130)
    isFallout4 = true;

void LoadBlocks(int64 blockStart, Header& header) {
    local int block_idx, typeIdx;
    local int64 blockPos, blockSize, blockEnd;
    local string blockType;
    local int skip_check, wrote_header, missing_check;
    local int diff, curPos;

#define WRITE_HEADER if (wrote_header == 0) { \
                Printf("\nErrors:\n"); \
                wrote_header = 1; }

    wrote_header = 0;
    blockPos = blockStart;
    for (block_idx=0; block_idx<header.numBlocks; ++block_idx) {
        FSeek(blockPos);
        typeIdx = header.blockTypeIndex[block_idx];
        blockSize = header.blockSize[block_idx];
        blockType = ReadNifString(header.blockTypes[typeIdx]);
        blockEnd = blockPos + blockSize;

        skip_check = 0;
        if (Strcmp(blockType, "NiNode") == 0)
            // NiNode node;
            skip_check = 1;
        else if (Strcmp(blockType, "BSSubIndexTriShape") == 0)
            BSSubIndexTriShape shape;
        else if (Strcmp(blockType, "BSSkin::Instance") == 0)
            BSSkin_Instance skin;
        else if (Strcmp(blockType, "BSSkin::BoneData") == 0)
            BSSkin_BoneData data;
        else if (Strcmp(blockType, "BSLightingShaderProperty") == 0)
            BSLightingShaderProperty property;
        else if (Strcmp(blockType, "BSShaderTextureSet") == 0)
            BSShaderTextureSet textureSet;
        else if (Strcmp(blockType, "BSXFlags") == 0)
            BSXFlags flags;
        else if (Strcmp(blockType, "bhkNPCollisionObject") == 0)
            bhkNPCollisionObject coll;
        else if (Strcmp(blockType, "bhkPhysicsSystem") == 0)
            bhkPhysicsSystem physics;
        else if (Strcmp(blockType, "BSTriShape") == 0)
            BSTriShape shape;
        

        else {
            WRITE_HEADER;
            Printf("%4d | %-50s | Missing\n", block_idx, blockType);
            skip_check = 1;
        }

        // print out mismatch errors
        if (!skip_check) {
            curPos = FTell();
            diff = blockEnd - curPos;
            if ( diff != 0 ) {
                WRITE_HEADER;
                Printf("%4d | %-50s | %5d | %5d != %5d | %5d\n",
                 block_idx, blockType, blockPos, blockEnd, curPos, diff);
            }
        }

        blockPos = blockEnd;
    }
}

LoadBlocks(FTell(), header);
