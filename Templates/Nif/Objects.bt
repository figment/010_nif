//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

RequiresVersion( 6.0 );

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;
typedef unsigned char	bool;

typedef struct {

	/*! Name of this controllable object, used to refer to the object in .kf files. */
	IndexString name;
	if ( info_version <= 0x02030000 ) {
	    /*! Extra data for pre-3.0 versions. */
	    bool hasOldExtraData;
		if ( hasOldExtraData ) {
	        /*! (=NiString ExtraData) */
	        IndexString oldExtraPropName;
	        /*! ref */
	        unsigned int oldExtraInternalId;
	        /*! Extra string data. */
	        IndexString oldExtraString;
		};
	    /*! Always 0. */
	    byte unknownByte;
	};
	if ( ( info_version >= 0x03000000 ) && ( info_version <= 0x04020200 ) ) {
	    /*! Extra data object index. (The first in a chain) */
	    Ref extraData;
	};
	if ( info_version >= 0x0A000100 ) {
	    /*! The number of Extra Data objects referenced through the list. */
	    unsigned int numExtraDataList;
	    if (numExtraDataList > 0)
	        Ref extraDataList[numExtraDataList];
	};
    if ( info_version >= 0x03000000 ) {
	    /*! Controller object index. (The first in a chain) */
	    Ref controller;
    }
} NiObject <name="NiObject", comment=CommentNiObject>;

string CommentNiObject(NiObject& obj) {
    if (exists(header))
        return CommentNiString (header.strings[obj.name.value]);
    return "";
}

typedef NiObject NiObjectNET;
typedef NiObjectNET NiProperty;

typedef struct {
    NiObject base;

	if ( info_version >= 0x03000000 ) {
	    /*! Some flags; commonly 0x000C or 0x000A. */
	    unsigned short flags;
	};
	if ( ( info_version >= 0x14020007 ) && ( ((info_userVersion >= 11) && (info_userVersion2 > 26)) ) ) {
	    /*! Unknown Flag */
	    unsigned short unknownShort1;
	};
	/*! The translation vector. */
	Vector3 translation;
	/*! The rotation part of the transformation matrix. */
	Matrix33 rotation;
	/*! Scaling part (only uniform scaling is supported). */
	float scale;
	if ( info_version <= 0x04020200 ) {
	    /*! Unknown function. Always seems to be (0, 0, 0) */
	    Vector3 velocity;
	}
	if ((info_version < 0x14020007) || (info_userVersion <= 11)) {
	    /*! The number of property objects referenced. */
	    unsigned int numProperties;
	    /*! List of node properties. */
        if (numProperties > 0)
	        Ref properties[numProperties];
	}
	if ( info_version <= 0x02030000 ) {
	    /*! Always 2,0,2,0. */
	    unsigned int unknown1[4];
	    /*! 0 or 1. */
	    byte unknown2;
	}

	if ( ( info_version >= 0x03000000 ) && ( info_version <= 0x04020200 ) ) {
	    /*! Do we have a bounding box? */
	    bool hasBoundingBox;
		if ( hasBoundingBox ) {
	        /*! The bounding box. */
	        BoundingBox boundingBox;
		}
	}
	/*!
	 * Refers to NiCollisionObject, which is usually a bounding box or other simple
	 * collision shape.  In Oblivion this links the Havok objects.
	 */
    if ( info_version >= 0x0A000100 ) {
	    Ref collisionObject;
    }
} NiAVObject <name="NiAVObject", comment=CommentNiAVObject>;

string CommentNiAVObject(NiAVObject& obj) {
    return CommentNiObject(obj.base);
}


typedef struct  {
    NiAVObject base;
	/*! The number of child objects. */
	unsigned int numChildren;
	/*! List of child node object indices. */
    if (numChildren > 0)
	    Ref children[numChildren];

    if (!(info_userVersion == 12 && info_userVersion2 >= 130)) {
	    /*! The number of references to effect objects that follow. */
	    unsigned int numEffects;
	    /*! List of node effects. ADynamicEffect? */
        if (numEffects > 0)
	        Ref effects[numEffects];
    }
} NiNode <name="NiNode", comment=CommentNiNode>;

string CommentNiNode(NiNode& obj) {
    return CommentNiAVObject(obj.base);
}


typedef struct {
    Vector3 Rotation[3];
    Vector3 Translation;
    float scale;
    uint numBones;
    byte hasVertWeights;
    struct boneWeights {
        Vector3 rot[3];
        Vector3 trans;
        float scl;
        Vector3 bsphere;
        float bsrad;
        ushort numVerts;
        struct skinweight {
            ushort index;
            float weight;
        } vertexWeights[numVerts];
    } bones[numBones]<optimize=false>;
   
} NiSkinData;
 
typedef struct {  
    uint numPartitions;
    struct SkinPartition {
        ushort numVerts;
        ushort numTris;
        ushort numBones;
        ushort numStrips;
        ushort numWeightPerVert;
        ushort bones[numBones];
        byte hasVertexMap;
        ushort vertMap[numVerts];
        byte hasVertexWeights;
        struct VertWeight {
            float vw[numWeightPerVert];
        } vertWeights[numVerts];
        ushort stripLengths[numStrips];
        byte hasFaces;
        if(numStrips != 0) {
            local int i;
            for(i=0;i<numStrips;i++) {  
                ushort Strip[stripLengths[i]];
            }
        } else {
            Triangle tris[numTris];
        }
        byte hasBoneIndices;
        struct BoneIndex {
            byte bi[numWeightPerVert];
        } boneIndices[numVerts];
        ushort unk;
    } SkinPartitionBlocks[numPartitions]<optimize=false>;
} NiSkinPartition;
 

typedef struct {
    NiObject base;

	/*! Skinning data reference. */
	Ref data;

    if ( info_version >= 0x0A020000 ) {
        /*!
         * Refers to a NiSkinPartition objects, which partitions the mesh such that every
         * vertex is only influenced by a limited number of bones.
         */
        Ref skinPartition;
    }    
	/*! Armature root node. */
	Ptr skeletonRoot;
    
	/*! The number of node bones referenced as influences. */
	unsigned int numBones;
	/*! List of all armature bones. */
    if (numBones > 0)
	    Ref bones[numBones];

} NiSkinInstance <name="NiSkinInstance">;



typedef struct {
    if ( info_version >= 0x0A000100 ) {
	    /*! Name of this object. */
	    IndexString name;
    }
    if ( info_version <= 0x04020200 ) {
	    /*! Block number of the next extra data object. */
	    Ref nextExtraData <comment="NiExtraData">;
    }
} NiExtraData <name="NiIntegerExtraData">;



typedef struct {
    NiExtraData base;

	/*! The value of the extra data. */
	unsigned int integerData;
} NiIntegerExtraData <name="NiIntegerExtraData">;



typedef struct {
    NiProperty base;
	/*!
	 * Bit 0 : alpha blending enable
	 *             Bits 1-4 : source blend mode
	 *             Bits 5-8 : destination blend mode
	 *             Bit 9 : alpha test enable
	 *             Bit 10-12 : alpha test mode
	 *             Bit 13 : no sorter flag ( disables triangle sorting )
	 * 
	 *             blend modes (glBlendFunc):
	 *             0000 GL_ONE
	 *             0001 GL_ZERO
	 *             0010 GL_SRC_COLOR
	 *             0011 GL_ONE_MINUS_SRC_COLOR
	 *             0100 GL_DST_COLOR
	 *             0101 GL_ONE_MINUS_DST_COLOR
	 *             0110 GL_SRC_ALPHA
	 *             0111 GL_ONE_MINUS_SRC_ALPHA
	 *             1000 GL_DST_ALPHA
	 *             1001 GL_ONE_MINUS_DST_ALPHA
	 *             1010 GL_SRC_ALPHA_SATURATE
	 * 
	 *             test modes (glAlphaFunc):
	 *             000 GL_ALWAYS
	 *             001 GL_LESS
	 *             010 GL_EQUAL
	 *             011 GL_LEQUAL
	 *             100 GL_GREATER
	 *             101 GL_NOTEQUAL
	 *             110 GL_GEQUAL
	 *             111 GL_NEVER
	 */
	unsigned short flags;
	/*! Threshold for alpha testing (see: glAlphaFunc) */
	byte threshold;
    if ( info_version <= 0x02030000 ) {
	    /*! Unknown */
	    unsigned short unknownShort1;
	    /*! Unknown */
	    unsigned int unknownInt2;
    }
} NiAlphaProperty <name="NiAlphaProperty">;


typedef struct {
    NiExtraData base;
    if ( info_version <= 0x04020200 ) {
	    /*!
	     * The number of bytes left in the record.  Equals the length of the following
	     * string + 4.
	     */
	    unsigned int bytesRemaining;
    }
	/*! The string. */
	IndexString stringData;

} NiStringExtraData <name="NiStringExtraData">;


typedef struct {
  	/*! Object name. */
	NiString  name;
	/*! Object reference. */
	Ptr avObject<comment="NiAVObject *">;

} AVObject <name="AVObject">;

typedef struct {

	/*! Unknown. */
	unsigned int unknownInt;
	/*! Number of objects. */
    unsigned int numObjs;
    if (numObjs > 0) {
	    /*! The objects. */
	    AVObject objs[numObjs]<optimize=false>;
    }
} NiDefaultAVObjectPalette <name="NiDefaultAVObjectPalette">;


typedef struct {
    NiExtraData base;
	/*! The number of bytes in this array */
	unsigned int dataSize;
    if (dataSize > 0) {
	    /*! The bytes which make up the array */
	    byte data[dataSize];
    }
} NiBinaryExtraData;

typedef struct {
    NiExtraData base;

	/*! Number of strings. */
	unsigned int numStrings;
    if (numStrings > 0) {
	    /*! The strings. */
	    NiString data[numStrings]<optimize=false>;
    }
} NiStringsExtraData;