//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

RequiresVersion( 6.0 );

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;
typedef unsigned char	bool;

typedef struct {

	/*! Name of this controllable object, used to refer to the object in .kf files. */
	IndexString name;
	if ( info_version <= 0x02030000 ) {
	    /*! Extra data for pre-3.0 versions. */
	    bool hasOldExtraData;
		if ( hasOldExtraData ) {
	        /*! (=NiString ExtraData) */
	        IndexString oldExtraPropName;
	        /*! ref */
	        unsigned int oldExtraInternalId;
	        /*! Extra string data. */
	        IndexString oldExtraString;
		};
	    /*! Always 0. */
	    byte unknownByte;
	};
	if ( ( info_version >= 0x03000000 ) && ( info_version <= 0x04020200 ) ) {
	    /*! Extra data object index. (The first in a chain) */
	    Ref extraData;
	};
	if ( info_version >= 0x0A000100 ) {
	    /*! The number of Extra Data objects referenced through the list. */
	    unsigned int numExtraDataList;
	    if (numExtraDataList > 0)
	        Ref extraDataList[numExtraDataList];
	};
    if ( info_version >= 0x03000000 ) {
	    /*! Controller object index. (The first in a chain) */
	    Ref controller;
    }
} NiObject <name="NiObject", comment=CommentNiObject>;

string CommentNiObject(NiObject& obj) {
    if (exists(header))
        return CommentNiString (header.strings[obj.name.value]);
    return "";
}

typedef NiObject NiObjectNET;
typedef NiObjectNET NiProperty;

typedef struct {
    NiObject base;

	if ( info_version >= 0x03000000 ) {
	    /*! Some flags; commonly 0x000C or 0x000A. */
	    unsigned short flags;
	};
	if ( ( info_version >= 0x14020007 ) && ( ((info_userVersion >= 11) && (info_userVersion2 > 26)) ) ) {
	    /*! Unknown Flag */
	    unsigned short unknownShort1;
	};
	/*! The translation vector. */
	Vector3 translation;
	/*! The rotation part of the transformation matrix. */
	Matrix33 rotation;
	/*! Scaling part (only uniform scaling is supported). */
	float scale;
	if ( info_version <= 0x04020200 ) {
	    /*! Unknown function. Always seems to be (0, 0, 0) */
	    Vector3 velocity;
	}
	if ((info_version < 0x14020007) || (info_userVersion <= 11)) {
	    /*! The number of property objects referenced. */
	    unsigned int numProperties;
	    /*! List of node properties. */
        if (numProperties > 0)
	        Ref properties[numProperties];
	}
	if ( info_version <= 0x02030000 ) {
	    /*! Always 2,0,2,0. */
	    unsigned int unknown1[4];
	    /*! 0 or 1. */
	    byte unknown2;
	}

	if ( ( info_version >= 0x03000000 ) && ( info_version <= 0x04020200 ) ) {
	    /*! Do we have a bounding box? */
	    bool hasBoundingBox;
		if ( hasBoundingBox ) {
	        /*! The bounding box. */
	        BoundingBox boundingBox;
		}
	}
	/*!
	 * Refers to NiCollisionObject, which is usually a bounding box or other simple
	 * collision shape.  In Oblivion this links the Havok objects.
	 */
    if ( info_version >= 0x0A000100 ) {
	    Ref collisionObject;
    }
} NiAVObject <name="NiAVObject", comment=CommentNiAVObject>;

string CommentNiAVObject(NiAVObject& obj) {
    return CommentNiObject(obj.base);
}


typedef struct  {
    NiAVObject base;
	/*! The number of child objects. */
	unsigned int numChildren;
	/*! List of child node object indices. */
    if (numChildren > 0)
	    Ref children[numChildren];

    if (!(info_userVersion == 12 && info_userVersion2 >= 130)) {
	    /*! The number of references to effect objects that follow. */
	    unsigned int numEffects;
	    /*! List of node effects. ADynamicEffect? */
        if (numEffects > 0)
	        Ref effects[numEffects];
    }
} NiNode <name="NiNode", comment=CommentNiNode>;

string CommentNiNode(NiNode& obj) {
    return CommentNiAVObject(obj.base);
}


typedef struct {
    Vector3 Rotation[3];
    Vector3 Translation;
    float scale;
    uint numBones;
    byte hasVertWeights;
    struct boneWeights {
        Vector3 rot[3];
        Vector3 trans;
        float scl;
        Vector3 bsphere;
        float bsrad;
        ushort numVerts;
        struct skinweight {
            ushort index;
            float weight;
        } vertexWeights[numVerts];
    } bones[numBones]<optimize=false>;
   
} NiSkinData;
 
typedef struct {  
    uint numPartitions;
    struct SkinPartition {
        ushort numVerts;
        ushort numTris;
        ushort numBones;
        ushort numStrips;
        ushort numWeightPerVert;
        ushort bones[numBones];
        byte hasVertexMap;
        ushort vertMap[numVerts];
        byte hasVertexWeights;
        struct VertWeight {
            float vw[numWeightPerVert];
        } vertWeights[numVerts];
        ushort stripLengths[numStrips];
        byte hasFaces;
        if(numStrips != 0) {
            local int i;
            for(i=0;i<numStrips;i++) {  
                ushort Strip[stripLengths[i]];
            }
        } else {
            Triangle tris[numTris];
        }
        byte hasBoneIndices;
        struct BoneIndex {
            byte bi[numWeightPerVert];
        } boneIndices[numVerts];
        ushort unk;
    } SkinPartitionBlocks[numPartitions]<optimize=false>;
} NiSkinPartition;
 

typedef struct {
    NiObject base;

	/*! Skinning data reference. */
	Ref data;

    if ( info_version >= 0x0A020000 ) {
        /*!
         * Refers to a NiSkinPartition objects, which partitions the mesh such that every
         * vertex is only influenced by a limited number of bones.
         */
        Ref skinPartition;
    }    
	/*! Armature root node. */
	Ptr skeletonRoot;
    
	/*! The number of node bones referenced as influences. */
	unsigned int numBones;
	/*! List of all armature bones. */
    if (numBones > 0)
	    Ref bones[numBones];

} NiSkinInstance <name="NiSkinInstance">;



typedef struct {
    if ( info_version >= 0x0A000100 ) {
	    /*! Name of this object. */
	    IndexString name;
    }
    if ( info_version <= 0x04020200 ) {
	    /*! Block number of the next extra data object. */
	    Ref nextExtraData <comment="NiExtraData">;
    }
} NiExtraData <name="NiIntegerExtraData">;



typedef struct {
    NiExtraData base;

	/*! The value of the extra data. */
	unsigned int integerData;
} NiIntegerExtraData <name="NiIntegerExtraData">;



typedef struct {
    NiProperty base;
	/*!
	 * Bit 0 : alpha blending enable
	 *             Bits 1-4 : source blend mode
	 *             Bits 5-8 : destination blend mode
	 *             Bit 9 : alpha test enable
	 *             Bit 10-12 : alpha test mode
	 *             Bit 13 : no sorter flag ( disables triangle sorting )
	 * 
	 *             blend modes (glBlendFunc):
	 *             0000 GL_ONE
	 *             0001 GL_ZERO
	 *             0010 GL_SRC_COLOR
	 *             0011 GL_ONE_MINUS_SRC_COLOR
	 *             0100 GL_DST_COLOR
	 *             0101 GL_ONE_MINUS_DST_COLOR
	 *             0110 GL_SRC_ALPHA
	 *             0111 GL_ONE_MINUS_SRC_ALPHA
	 *             1000 GL_DST_ALPHA
	 *             1001 GL_ONE_MINUS_DST_ALPHA
	 *             1010 GL_SRC_ALPHA_SATURATE
	 * 
	 *             test modes (glAlphaFunc):
	 *             000 GL_ALWAYS
	 *             001 GL_LESS
	 *             010 GL_EQUAL
	 *             011 GL_LEQUAL
	 *             100 GL_GREATER
	 *             101 GL_NOTEQUAL
	 *             110 GL_GEQUAL
	 *             111 GL_NEVER
	 */
	unsigned short flags;
	/*! Threshold for alpha testing (see: glAlphaFunc) */
	byte threshold;
    if ( info_version <= 0x02030000 ) {
	    /*! Unknown */
	    unsigned short unknownShort1;
	    /*! Unknown */
	    unsigned int unknownInt2;
    }
} NiAlphaProperty <name="NiAlphaProperty">;


typedef struct {
    NiExtraData base;
    if ( info_version <= 0x04020200 ) {
	    /*!
	     * The number of bytes left in the record.  Equals the length of the following
	     * string + 4.
	     */
	    unsigned int bytesRemaining;
    }
	/*! The string. */
	IndexString stringData;

} NiStringExtraData <name="NiStringExtraData">;


typedef struct {
  	/*! Object name. */
	NiString  name;
	/*! Object reference. */
	Ptr avObject<comment="NiAVObject *">;

} AVObject <name="AVObject">;

typedef struct {

	/*! Unknown. */
	unsigned int unknownInt;
	/*! Number of objects. */
    unsigned int numObjs;
    if (numObjs > 0) {
	    /*! The objects. */
	    AVObject objs[numObjs]<optimize=false>;
    }
} NiDefaultAVObjectPalette <name="NiDefaultAVObjectPalette">;


typedef struct {
    NiExtraData base;
	/*! The number of bytes in this array */
	unsigned int dataSize;
    if (dataSize > 0) {
	    /*! The bytes which make up the array */
	    byte data[dataSize];
    }
} NiBinaryExtraData;

typedef struct {
    NiExtraData base;

	/*! Number of strings. */
	unsigned int numStrings;
    if (numStrings > 0) {
	    /*! The strings. */
	    NiString data[numStrings]<optimize=false>;
    }
} NiStringsExtraData;


typedef struct {
    NiAVObject base;

if (!isFallout4) {

    if ( info_version >= 0x0A01006A ) {
	    /*! Turns effect on and off?  Switches list to list of unaffected nodes? */
	    bool switchState;
    }
    if ( info_version <= 0x04000002 ) {
	    /*! The number of affected nodes referenced. */
	    unsigned int numAffectedNodeListPointers;
        if (numAffectedNodeListPointers > 0) {
	        /*!
	         * This is probably the list of affected nodes. For some reason i do not know the
	         * max exporter seems to write pointers instead of links. But it doesn't matter
	         * because at least in version 4.0.0.2 the list is automagically updated by the
	         * engine during the load stage.
	         */
	        unsigned int affectedNodeListPointers[numAffectedNodeListPointers];
        }
    }
    if ( info_version >= 0x0A010000 ) {
	    /*! The number of affected nodes referenced. */
	    unsigned int numAffectedNodes;
        if (numAffectedNodes > 0) {
	        /*! The list of affected nodes? */
	        Ref affectedNodes[numAffectedNodes]<comment="NiAVObject">;
        }
    }
}
} NiDynamicEffect;

typedef struct {
    NiDynamicEffect base;

	/*! Dimmer. */
	float dimmer;
	/*! Ambient color. */
	Color3 ambientColor;
	/*! Diffuse color. */
	Color3 diffuseColor;
	/*! Specular color. */
	Color3 specularColor;
} NiLight;


typedef struct {
    NiLight base;
  	/*! Constant Attenuation */
	float constantAttenuation;
	/*! Linear Attenuation */
	float linearAttenuation;
	/*! Quadratic Attenuation (see glLight) */
	float quadraticAttenuation;
} NiPointLight;

local bool isNiPSysData = false;
typedef struct {

	if ( info_version >= 0x0A020000 ) {
	    /*! Unknown identifier. Always 0. */
	    int unknownInt;
	};

	/*! Number of vertices. */
	unsigned short numVertices;
if (1 == 0) {
	if (!exists(isNiPSysData) || isNiPSysData) {
	    /*! Number of vertices. */
	    unsigned short numVertices;
	};
	if ( ((info_version < 0x14020007) || (info_userVersion < 11)) ) {
		if (exists(isNiPSysData) && isNiPSysData) {
	        /*! Number of vertices. */
	        unsigned short numVertices;
		};
	};
    if (!exists(numVertices))
        local short numVertices = 0;

	if ( ((info_version >= 0x14020007) && (info_userVersion >= 11)) ) {
        if (exists(isNiPSysData) && isNiPSysData)
	        /*! Bethesda uses this for max number of particles in NiPSysData. */
	        unsigned short bsMaxVertices;
	};
}

	if ( info_version >= 0x0A010000 ) {
	    /*! Used with NiCollision objects when OBB or TRI is set. */
	    byte keepFlags;
	    /*! Unknown. */
	    byte compressFlags;
	};
	/*! Is the vertex array present? (Always non-zero.) */
	bool hasVertices;
	if ( hasVertices && numVertices > 0) {
	    /*! The mesh vertices. */
	    Vector3 vertices[numVertices];
	};
	if ( ((info_version >= 0x0A000100) && (!((info_version >= 0x14020007) && (info_userVersion >= 11)))) ) {
	    /*! Flag for tangents and bitangents in upper byte. Texture flags in lower byte. */
	    unsigned short numUvSets;
	};
	if ( ((info_version >= 0x14020007) && (info_userVersion >= 11)) ) {
	    /*!
	     * Bethesda's version of this field for nif versions 20.2.0.7 and up. Only a single
	     * bit denotes whether uv's are present. For example, see
	     * meshes/architecture/megaton/megatonrampturn45sml.nif in Fallout 3.
	     */
	    unsigned short bsNumUvSets;
        if (!exists(numUvSets))
            local unsigned short numUvSets = 0;
	};
	if ( ( info_version >= 0x14020007 ) && ( info_userVersion == 12 ) ) {
	    /*! Material */
	    SkyrimHavokMaterial skyrimMaterial;
	};
	/*!
	 * Do we have lighting normals? These are essential for proper lighting: if not
	 * present, the model will only be influenced by ambient light.
	 */
	bool hasNormals;
	if ( hasNormals ) {
	    /*! The lighting normals. */
	    Vector3 normals[numVertices];
	};
	if ( info_version >= 0x0A010000 ) {
		if ( (hasNormals && ((numUvSets & 61440) || (bsNumUvSets & 61440))) ) {
	        /*! Tangent vectors. */
            Vector3 tangents[numVertices];
	        /*! Bitangent vectors. */
        	Vector3 bitangents[numVertices];
		};
	};

	/*!
	 * Center of the bounding box (smallest box that contains all vertices) of the
	 * mesh.
	 */
	Vector3 center;
	/*!
	 * Radius of the mesh: maximal Euclidean distance between the center and all
	 * vertices.
	 */
	float radius;

	if ( ( info_version >= 0x14030009 ) && ( info_version <= 0x14030009 ) && ( info_userVersion == 131072 ) ) {
	    /*! Unknown, always 0? */
	    short unknown13Shorts[13];
	};
	/*!
	 * Do we have vertex colors? These are usually used to fine-tune the lighting of
	 * the model.
	 * 
	 *             Note: how vertex colors influence the model can be controlled by
	 * having a NiVertexColorProperty object as a property child of the root node. If
	 * this property object is not present, the vertex colors fine-tune lighting.
	 * 
	 *             Note 2: set to either 0 or 0xFFFFFFFF for NifTexture compatibility.
	 */
	bool hasVertexColors;
	if ( hasVertexColors ) {
	    /*! The vertex colors. */
	    Color4 vertexColors[numVertices];
	};
	if ( info_version <= 0x04020200 ) {
	    /*! Flag for tangents and bitangents in upper byte. Texture flags in lower byte. */
	    unsigned short numUvSets;
	};

	if ( info_version <= 0x04000002 ) {
	    /*!
	     * Do we have UV coordinates?
	     * 
	     *             Note: for compatibility with NifTexture, set this value to either
	     * 0x00000000 or 0xFFFFFFFF.
	     */
	    bool hasUv;
	};
    local int uvSetSize = ((numUvSets & 63) | (bsNumUvSets & 1));

	/*!
	 * The UV texture coordinates. They follow the OpenGL standard: some programs may
	 * require you to flip the second coordinate.
	 */
    struct {
        TexCoord v[numVertices];
    } uvSets[uvSetSize];

	if ( ( info_version >= 0x0A000100 ) && ( (info_userVersion < 12) ) ) {
	    /*! Consistency Flags */
	    ConsistencyType consistencyFlags;
	};
	if ( ( info_version >= 0x14000004 ) && ( (info_userVersion < 12) ) ) {
	    /*! Unknown. */
	    Ref additionalData<comment="AbstractAdditionalGeometryData">;
	};

} NiGeometryData;


typedef struct {
    NiAVObject base;

	/*! Data index (NiTriShapeData/NiTriStripData). */
	Ref data<comment="NiGeometryData">;
    if ( info_version >= 0x0303000D ) {
	    /*! Skin instance index. */
	    Ref skinInstance<comment="NiSkinInstance">;
    }
    if ( info_version >= 0x14020007 ) {
	    /*! Num Materials */
	    unsigned int numMaterials;
        if (numMaterials > 0){
	        /*! Unknown string.  Shader? */
	        IndexString materialName[numMaterials];
	        /*! Unknown integer; often -1. (Is this a link, array index?) */
	        int materialExtraData[numMaterials];
        }
	    /*! Active Material; often -1. (Is this a link, array index?) */
	    int activeMaterial;
    }
    if ( ( info_version >= 0x0A000100 ) && ( info_version <= 0x14010003 ) ) {
	    /*! Shader. */
	    bool hasShader;
        if (hasShader) {
	        /*! The shader name. */
	        IndexString shaderName;
	        /*! Unknown value, usually -1. (Not a link) */
	        int unknownInteger;
        }
    }
    if ( info_userVersion == 1 ) {
	    /*! Cyanide extension (only in version 10.2.0.0?). */
	    byte unknownByte;
    }
    if ( ( info_version >= 0x0A040001 ) && ( info_version <= 0x0A040001 ) ) {
	    /*! Unknown. */
	    int unknownInteger2;
    }
if (isFallout4) {
    Ref unk;
} else {
    if ( info_version >= 0x14020007 ) {
	    /*! Dirty Flag? */
	    bool dirtyFlag;
    }
}
    if ( ( info_version >= 0x14020007 ) && ( info_userVersion == 12 ) ) {
	    /*! Two property links, used by Bethesda. */
	    Ref bsProperties[2]<comment="NiProperty">;
    }
} NiGeometry;


typedef struct {
    NiAVObject base;

    if ( info_version >= 0x0A010000 ) {
	    /*! Unknown. */
	    unsigned short unknownShort;
    }
	/*! Frustrum left. */
	float frustumLeft;
	/*! Frustrum right. */
	float frustumRight;
	/*! Frustrum top. */
	float frustumTop;
	/*! Frustrum bottom. */
	float frustumBottom;
	/*! Frustrum near. */
	float frustumNear;
	/*! Frustrum far. */
	float frustumFar;
    if ( info_version >= 0x0A010000 ) {
	    /*! Determines whether perspective is used.  Orthographic means no perspective. */
	    bool useOrthographicProjection;
    }
	/*! Viewport left. */
	float viewportLeft;
	/*! Viewport right. */
	float viewportRight;
	/*! Viewport top. */
	float viewportTop;
	/*! Viewport bottom. */
	float viewportBottom;
	/*! Level of detail adjust. */
	float lodAdjust;
	/*! Unknown. */
	Ref unknownLink<comment="NiObject">;
	/*! Unknown.  Changing value crashes viewer. */
	unsigned int unknownInt;
    if ( info_version >= 0x04020100 ) {
    	/*! Unknown.  Changing value crashes viewer. */
	    unsigned int unknownInt2;
    }
    if ( info_version <= 0x03010000 ) {
	    /*! Unknown. */
	    unsigned int unknownInt3;
    }

} NiCamera;

typedef struct {
    NiNode base;
	/*! The way the billboard will react to the camera. */
	BillboardMode billboardMode;
} NiBillboardNode;


typedef struct {
    NiNode base;
    if ( info_version >= 0x0A010000 ) {
	    /*! Flags */
	    unsigned short unknownFlags1;
    }
	/*! Index? */
	int unknownInt1;
} NiSwitchNode;