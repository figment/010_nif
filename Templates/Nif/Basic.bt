//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

RequiresVersion( 6.0 );

// Define the headers
LittleEndian(); 

typedef unsigned char	byte;

typedef struct { string s; } HeaderString <name="string",read=ReadHeaderString,size=SizeHeaderString>;

string ReadHeaderString( HeaderString &s )
{
    local int size;
    local char data[];
    data = ReadLine(startof(s), 50, true);
    RegExSearch(data, "[^\n]*\n", size);
    FSeek(startof(s)+size);
    return SubStr(data, 0, size);
}

int SizeHeaderString(HeaderString &s) {
    local int size;
    local char data[];
    data = ReadLine(startof(s), 50, true);
    RegExSearch(data, "[^\n]*\n", size);
    return size;
}

typedef struct {
    uchar len;
	string str;
}  ShortString <name="string",read=ReadShortString,size=SizeShortString>;

string ReadShortString( ShortString &s ) { 
    local uchar len = ReadUByte();
    return ReadString(startof(s)+1, len); 
}
int SizeShortString(ShortString &s) { 
    local uchar len = ReadUByte();
    return len + 1; 
}

typedef struct {
    ushort len;
	string str;
}  LongString <name="string",read=ReadLongString,size=SizeLongString,comment=CommentLongString>;

string ReadLongString( LongString &s ) { 
    local ushort len = ReadUShort();
    return ReadString(startof(s)+2, len); 
}
int SizeLongString(LongString &s) { 
    local ushort len = ReadUShort();
    return len+2; 
}
string CommentLongString( LongString &s ) { 
    return s.str; 
}

typedef struct {
    int len;
	string str;
} NiString  <read=ReadNiString ,size=SizeNiString ,comment=CommentNiString >;

string ReadNiString ( NiString  &s ) { 
    local int len = ReadInt(startof(s));
    if (len == 0) return "";
    return ReadString(startof(s)+4, len); 
}
int SizeNiString ( NiString  &s) {
    local int len = ReadInt(startof(s));
    return 4 + len; 
}
string CommentNiString ( NiString  &s ) { 
    if (s.len == 0) return "";
    return SubStr(s.str, 0, s.len); 
}


typedef struct {
	string line;
}  LineString <name="string", read=ReadLineString,size=SizeLineString>;

string ReadLineString( LineString &s )
{
    local int size;
    local char data[];
    data = ReadLine(startof(s), 50, true);
    RegExSearch(data, "[^\n]*\n", size);
    return SubStr(data, 0, size);
}

int SizeLineString(LineString &s) {
    local int size;
    local char data[];
    data = ReadLine(startof(s), 50, true);
    RegExSearch(data, "[^\n]*\n", size);
    return size;
}

typedef struct {
    int value;
} IndexString <name="string",comment=CommentIndexString>;


string CommentIndexString(IndexString& obj) {
    local char buffer[256];
    if (exists(header)) {
        local string name = CommentNiString (header.strings[obj.value]);
        SPrintf(buffer, "[%2d] %s", obj.value, name );
        return buffer;
    } else {
        SPrintf(buffer, "%d", obj.value);
        return buffer;
    }
}

struct Char8String {
    string value;
} ;


//struct Ref {     int value; };
typedef int Ref;
typedef int Ptr;

/*! Stores 2D texture coordinates as two floating point variables, u and v. */
typedef struct  {
	float u; /*!< The U value in this coordinate pair. */ 
	float v; /*!< The V value in this coordinate pair. */ 
} TexCoord;

string CommentTexCoord(TexCoord &t) {
    local char buffer[32];
    SPrintf(buffer, "%6.2f,%6.2f", t.u, t.v);
    return buffer;
}


typedef struct  {
	float x; /*!< The X component of this vector. */ 
	float y; /*!< The Y component of this vector. */ 
	float z; /*!< The Z component of this vector. */ 
} Vector3 <name="Vector3", comment=CommentVector3>;

string CommentVector3(Vector3 &v) {
    local char buffer[32];
    SPrintf(buffer, "%6.2f,%6.2f,%6.2f", v.x, v.y, v.z);
    return buffer;
}


typedef struct {
	unsigned short v1; /*!< The index of the first vertex. */ 
	unsigned short v2; /*!< The index of the second vertex. */ 
	unsigned short v3; /*!< The index of the third vertex. */ 
} Triangle <comment=CommentTriangle>;

string CommentTriangle(Triangle &tri) {
    local char buffer[32];
    SPrintf(buffer, "%4d,%4d,%4d", tri.v1, tri.v2, tri.v3);
    return buffer;
}

/*! Stores a color along with alpha translucency */
typedef struct {
	float r; /*!< The red component of this color.  Should be between 0.0f and 1.0f. */ 
	float g; /*!< The green component of this color.  Should be between 0.0f and 1.0f. */ 
	float b; /*!< The blue component of this color.  Should be between 0.0f and 1.0f. */ 
} Color3 <comment=CommentColor3>;

string CommentColor3(Color3 &c) {
    local char buffer[32];
    SPrintf(buffer, "%6.3f,%6.3f,%6.3f", c.r, c.g, c.b);
    return buffer;
}

/*!Represents a position or direction in 3D space*/
typedef struct {
	float x; /*!< The X component of this vector. */ 
	float y; /*!< The Y component of this vector. */ 
	float z; /*!< The Z component of this vector. */ 
	float w; /*!< The W component of this vector. */ 
} Vector4 <name="Vector4", comment=CommentVector4>;

string CommentVector4(Vector3 &v) {
    local char buffer[32];
    SPrintf(buffer, "%6.2f,%6.2f,%6.2f,%6.2f", v.x, v.y, v.z, v.w);
    return buffer;
}


typedef struct  {
	float data[2]; /*!< The two floating point numbers stored as an array. */ 
} Float2 <name="Float2">;

typedef struct {
	Float2 rows[2];  /*!< The two rows of Float2 structures which hold two floating point numbers each. */ 
} Matrix22 <name="Matrix22">;

/* Stores three floating point numbers.  Used as a row of a Matrix33 and to store the data in attr_vector3 and attr_color3 type attributes. */
struct Float3 {
	float data[3]; /*!< The three floating point numbers stored as an array. */ 
};

/*! Stores a 3 by 3 matrix used for rotation. */
struct Matrix33 {
	Float3 rows[3]; /*!< The three rows of Float3 structures which hold three floating point numbers each. */ 
};
/* Stores four floating point numbers.  Used as a row of a Matrix44. */
struct Float4 {
	float data[4]; /*!< The four floating point numbers stored as an array. */ 
};
/*! Stores a 4 by 4 matrix used for combined transformations. */
struct Matrix44 {
	Float4 rows[4]; /*!< The three rows of Float3 structures which hold three floating point numbers each. */ 
};

typedef struct  {
    byte x;
    byte y;
    byte z;
    byte w;
}ByteVector4 <comment=CommentByteVector4>;

string CommentByteVector4(ByteVector4& v) {
    local char buffer[32];
    SPrintf(buffer, "%02x,%02x,%02x,%02x", v.x, v.y, v.z, v.w);
    return buffer;    
}


typedef struct  {
    byte x;
    byte y;
    byte z;
}ByteVector3 <comment=CommentByteVector3>;

string CommentByteVector3(ByteVector3& v) {
    local char buffer[32];
    SPrintf(buffer, "%02x,%02x,%02x", v.x, v.y, v.z);
    return buffer;    
}


/*! Stores a color along with alpha translucency */
struct Color4 {
	float r; /*!< The red component of this color.  Should be between 0.0f and 1.0f. */ 
	float g; /*!< The green component of this color.  Should be between 0.0f and 1.0f. */ 
	float b; /*!< The blue component of this color.  Should be between 0.0f and 1.0f. */ 
	float a; /*!< The alpha translucency component of this color.  Should be between 0.0f and 1.0f. */ 
};

/*! Represents a quaternion - a 4D extention of complex numbers used as an alternitive to matrices to represent rotation.*/
struct Quaternion {
	float w; /*!< The W scalar component of this Quaternion. */ 
	float x; /*!< The X vector component of this Quaternion. */ 
	float y; /*!< The Y vector component of this Quaternion. */ 
	float z; /*!< The Z vector component of this Quaternion. */ 
};

struct QTransform {
	/*! Translation. */
	Vector3 translation;
	/*! Rotation. */
	Quaternion rotation;
	/*! Scale. */
	float scale;
};


/*! Stores a 4 by 3 matrix used for tensors. */
struct InertiaMatrix {
	Float4 rows[3]; /*!< The three rows of Float3 structures which hold three floating point numbers each. */ 
};

/*! Bounding box. */
struct BoundingBox {
	/*! Usually 1. */
	unsigned int unknownInt;
	/*! Translation vector. */
	Vector3 translation;
	/*! Rotation matrix. */
	Matrix33 rotation;
	/*! Radius, per direction. */
	Vector3 radius;
};

