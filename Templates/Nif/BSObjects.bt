//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

RequiresVersion( 6.0 );


// Define the headers
LittleEndian(); 

//if( !exists( header ) ) {
//    Printf("Load NifTemplate.bt or Nif_Fallout4.bt");
//    Exit(-1);
//}

typedef unsigned char	byte;

typedef struct {
    NiSkinInstance base;

    int numPartitions;
    struct Partition {
        ushort flags;
        ushort id;
    } partitions[numPartitions];
 
} BSDismemberSkinInstance;
 
typedef struct {
	/*! Number of Textures */
	int numTextures;
	/*!
	 * Textures.
	 *             0: Diffuse
	 *             1: Normal/Gloss
	 *             2: Glow(SLSF2_Glow_Map)/Skin/Hair/Rim light(SLSF2_Rim_Lighting)
	 *             3: Height/Parallax
	 *             4: Environment
	 *             5: Environment Mask
	 *             6: Subsurface for Multilayer Parallax
	 *             7: Back Lighting Map (SLSF2_Back_Lighting)
	 */
	NiString  textures[numTextures]<optimize=false>;
} BSShaderTextureSet <name="BSShaderTextureSet">;


/*!
 * Controls animation and collision.  Integer holds flags:
 *         Bit 0 : enable havok, bAnimated(Skyrim)
 *         Bit 1 : enable collision, bHavok(Skyrim)
 *         Bit 2 : is skeleton nif?, bRagdoll(Skyrim)
 *         Bit 3 : enable animation, bComplex(Skyrim)
 *         Bit 4 : FlameNodes present, bAddon(Skyrim)
 *         Bit 5 : EditorMarkers present
 *         Bit 6 : bDynamic(Skyrim)
 *         Bit 7 : bArticulated(Skyrim)
 *         Bit 8 : bIKTarget(Skyrim)
 *         Bit 9 : Unknown(Skyrim)
 */
typedef NiIntegerExtraData BSXFlags <name="BSXFlags">;

typedef struct {
    NiExtraData base;

	/*! Name of the hkx file. */
	IndexString behaviourGraphFile;
	/*! Unknown, has to do with blending appended bones onto an actor. */
	byte controlsBaseSkeleton;

} BSBehaviorGraphExtraData <name="BSBehaviorGraphExtraData">;


typedef struct {
    NiFloatInterpController base;

	/*! Which float variable in BSEffectShaderProperty to animate: */
	EffectShaderControlledVariable typeOfControlledVariable;

} BSEffectShaderPropertyFloatController <name="BSEffectShaderPropertyFloatController">;


typedef struct {
    NiFloatInterpController base;
	/*! Which float variable in BSLightingShaderProperty to animate: */
	LightingShaderControlledVariable typeOfControlledVariable;
   
} BSLightingShaderPropertyFloatController <name="BSLightingShaderPropertyFloatController">;

typedef NiObject NiProperty <name="NiProperty">;





typedef struct {

	if ( (info_userVersion >= 12) ) {
	    /* Configures the main shader path */
	    BSLightingShaderPropertyShaderType skyrimShaderType;
	}

    NiProperty base;

	if ( (info_userVersion == 12) ) {
	    /*! Skyrim Shader Flags for setting render/shader options. */
	    SkyrimShaderPropertyFlags1 shaderFlags1;
	    /*! Skyrim Shader Flags for setting render/shader options. */
	    SkyrimShaderPropertyFlags2 shaderFlags2;
	};

	/*! Offset UVs */
	TexCoord uvOffset;
	/*! Offset UV Scale to repeat tiling textures, see above. */
	TexCoord uvScale;
	/*! Texture Set, can have override in an esm/esp */
	Ref textureSet;
	/*! Glow color and alpha */
	Color3 emissiveColor;
	/*! Multiplied emissive colors */
	float emissiveMultiple;

    if (isFallout4)
        Ref wetMaterialNameId <comment="New: Fallout 4">;

	/*! How to handle texture borders. */
	TexClampMode textureClampMode;
	/*! The materials opacity (1=non-transparent). */
	float alpha;
	/*! Refraction strength increases as value increases */
	float refractionStrength;
	/*! The material's specular power, or glossiness (0-999). */
	float glossiness;
	/*! Adds a colored highlight. */
	Color3 specularColor;
	/*! Brightness of specular highlight. (0=not visible) (0-999) */
	float specularStrength;
	/*! Controls strength for envmap/backlight/rim/softlight lighting effect? */
	float lightingEffect1;
	/*! Controls strength for envmap/backlight/rim/softlight lighting effect? */
	float lightingEffect2;


    if (isFallout4) {
        float unk <comment="0">;
        float unk <comment="0.502">;
        float unk <comment="5">;
        float unk <comment="0.25">;
        float unk <comment="1.7">;
        float unk <comment="0.4">;
        float unk <comment="2">;
        float unk <comment="0.75">;
        float unk <comment="0.3">;
    }
	if ( (skyrimShaderType == 1) ) {
	    /*! Scales the intensity of the environment/cube map. (0-1) */
	    float environmentMapScale;
        if (isFallout4)
            ushort unk;
	};
	if ( (skyrimShaderType == 5) ) {
	    /*! Tints the base texture. Overridden by game settings. */
	    Color3 skinTintColor;
        if (isFallout4)
            int unk;
	};
	if ( (skyrimShaderType == 6) ) {
	    /*! Tints the base texture. Overridden by game settings. */
	    Color3 hairTintColor;
	}
	if ( (skyrimShaderType == 7) ) {
	    /*! Max Passes */
	    float maxPasses;
	    /*! Scale */
	    float scale;
	}
	if ( (skyrimShaderType == 11) ) {
	    /*! How far from the surface the inner layer appears to be. */
	    float parallaxInnerLayerThickness;
	    /*! Depth of inner parallax layer effect. */
	    float parallaxRefractionScale;
	    /*! Scales the inner parallax layer texture. */
	    TexCoord parallaxInnerLayerTextureScale;
	    /*! How strong the environment/cube map is. (0-??) */
	    float parallaxEnvmapStrength;
	}
	if ( (skyrimShaderType == 14) ) {
	    /*! Unknown/unused?  CK lists "snow material" when used. */
	    Vector4 sparkleParameters;
	}
	if ( (skyrimShaderType == 16) ) {
	    /*! Eye cubemap scale */
	    float eyeCubemapScale;
	    /*! Offset to set center for left eye cubemap */
	    Vector3 leftEyeReflectionCenter;
	    /*! Offset to set center for right eye cubemap */
	    Vector3 rightEyeReflectionCenter;
	}
   

} BSLightingShaderProperty <name="BSLightingShaderProperty">;


typedef struct {
    NiProperty base;
    
	/*! Unknown. */
	SkyrimShaderPropertyFlags1 shaderFlags1 <name="flags1",format=hex>;
	/*! Unknown. */
	SkyrimShaderPropertyFlags2 shaderFlags2 <name="flags2",format=hex>;
	/*! Offset UVs */
	TexCoord uvOffset;
	/*! Offset UV Scale to repeat tiling textures */
	TexCoord uvScale;
	/*! points to an external texture. */
	NiString sourceTexture;
	/*! How to handle texture borders. */
	TexClampMode textureClampMode : 4;
	unsigned int textureClampMode : 28;
    if(!isFallout4) {
	    /*! At this cosine of angle falloff will be equal to Falloff Start Opacity */
	    float falloffStartAngle;
	    /*! At this cosine of angle falloff will be equal to Falloff Stop Opacity */
	    float falloffStopAngle;
	    /*! Alpha falloff multiplier at start angle */
	    float falloffStartOpacity;
	    /*! Alpha falloff multiplier at end angle */
	    float falloffStopOpacity;
	    /*! Emissive color */
	    Color4 emissiveColor;
	    /*! Multiplier for Emissive Color (RGB part) */
	    float emissiveMultiple;
	    /*! Unknown. */
	    float softFalloffDepth;
	    /*!
	     * Points to an external texture, used as palette for
	     * SLSF1_Greyscale_To_PaletteColor/SLSF1_Greyscale_To_PaletteAlpha.
	     */
	    NiString greyscaleTexture;
    }
    if(isFallout4) {
        float unkdata [10];
        NiString  emissiveTex;
        NiString  diffuseTexture;
        NiString  specularTexture;  
        float unk;
        float unkdata2;      
        //unsigned int unk;  // not in PipboyDusty.nif  (probably based on flags)
        //unsigned int unk;  // not in PipboyDusty.nif (probably based on flags)
    } 

} BSEffectShaderProperty <name="BSEffectShaderProperty">;

typedef struct {
    NiAlphaController base;
} BSNiAlphaPropertyTestRefController <name="BSNiAlphaPropertyTestRefController">;



/*! Stores Bone Level of Detail info in a BSBoneLODExtraData */
struct BoneLOD {
	/*! Distance to cull? */
	unsigned int distance;
	/*! The bones name */
	IndexString boneName;
};

typedef struct {
    NiExtraData base;

	/*! Number of bone entries */
	unsigned int bonelodCount;

    if (bonelodCount > 0) {
	    /*! Bone Entry */
	    BoneLOD bonelodInfo[bonelodCount];
    }

} BSBoneLODExtraData <name="BSBoneLODExtraData">;

typedef struct {
    NiExtraData base;
	/*! Center of the bounding box. */
	Vector3 center;
	/*! Dimensions of the bounding box from center. */
	Vector3 dimensions;

} BSBound <name="BSBound">;

typedef struct {
    NiNode base;

	/*! Value */
	int value;
	/*! Unknown */
	byte unknownByte;

} BSValueNode;

typedef struct {
    NiTimeController base;

	/*! How long it takes to rotate about an actor back to rest position. */
	float linearVelocity;
	/*! How the bone lags rotation */
	float linearRotation;
	/*! How far bone will tail an actor. */
	float maximumDistance;

} BSLagBoneController;